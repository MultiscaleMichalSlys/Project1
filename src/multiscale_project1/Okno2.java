/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package multiscale_project1;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import static java.lang.Math.sqrt;
import java.sql.Time;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;



/**
 *
 * @author Michal
 */
public class Okno2 extends javax.swing.JFrame {

    /**
     * Creates new form Okno
     */
    JPanel jPanel1 = new JPanel();
    Rozrost rozrost;
    Rekrystalizacja rekrystal;
    int id=0;
    public Okno2() {
        initComponents();
        rozrost = new Rozrost();
        rekrystal = null;
        this.periodicBC.setSelected(true);
        this.add(jPanel1);
        this.setSize(700, 500);
        jPanel1.setVisible(true);
        jPanel1.setLocation(15, 20);
        jPanel1.setSize(400, 400);
        jPanel1.setBackground(Color.black);
        
        jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("Bitmap files", "bmp"));
        jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("Text files", "txt"));
      
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jFileChooser1 = new javax.swing.JFileChooser();
        StartButton = new javax.swing.JButton();
        periodicBC = new javax.swing.JRadioButton();
        absorbingBC = new javax.swing.JRadioButton();
        BCLabel = new javax.swing.JLabel();
        nucleonamonutLabel = new javax.swing.JLabel();
        nucleonAmount = new javax.swing.JSpinner();
        xSizeLabel = new javax.swing.JLabel();
        ySizeLabel = new javax.swing.JLabel();
        xSize = new javax.swing.JTextField();
        ySize = new javax.swing.JTextField();
        cleanButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        inclusionType = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        radius = new javax.swing.JSpinner();
        inclusionsWhen = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        szer_granic = new javax.swing.JSpinner();
        prob = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        ngrains = new javax.swing.JSpinner();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        structuretype = new javax.swing.JComboBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        microstructureMenu = new javax.swing.JMenu();
        ImportMenuItem = new javax.swing.JMenuItem();
        ExportMenuItem = new javax.swing.JMenuItem();

        jScrollPane1.setToolTipText("");
        jScrollPane1.setViewportView(jEditorPane1);

        jFileChooser1.setApproveButtonText("");
        jFileChooser1.setFileHidingEnabled(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setSize(new java.awt.Dimension(668, 650));

        StartButton.setText("Start");
        StartButton.setActionCommand("Simulation");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        periodicBC.setText("periodic");
        periodicBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periodicBCActionPerformed(evt);
            }
        });

        absorbingBC.setText("absorbing");
        absorbingBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absorbingBCActionPerformed(evt);
            }
        });

        BCLabel.setText("Bonduary conditions");

        nucleonamonutLabel.setText("Nucleon amount:");

        nucleonAmount.setToolTipText("");
        nucleonAmount.setMinimumSize(new java.awt.Dimension(40, 20));
        nucleonAmount.setRequestFocusEnabled(false);
        nucleonAmount.setValue(5);

        xSizeLabel.setText("xSize");

        ySizeLabel.setText("ySize");

        xSize.setText("400");
        xSize.setName("xSize"); // NOI18N
        xSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xSizeActionPerformed(evt);
            }
        });

        ySize.setText("400");
        ySize.setName("ySize"); // NOI18N

        cleanButton.setText("Clean");
        cleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Insert random nucleons");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Type of inclusions");

        inclusionType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Square", "Circle" }));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jLabel2.setText("Diagonal/radius");

        radius.setValue(5);

        inclusionsWhen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "At the begining", "After simulation" }));

        jLabel3.setText("When?");

        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Extended Moore");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jButton4.setText("Grain boundaries coloring");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        szer_granic.setValue(1);

        prob.setValue(5);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jLabel4.setText("Probability");

        jButton5.setText("Clear space");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        ngrains.setValue(5);

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jButton6.setLabel("Selected n grains");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jButton7.setText("Color");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("ca->ca");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        structuretype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Substructure", "Dual phase" }));

        fileMenu.setText("File");
        fileMenu.setToolTipText("");

        microstructureMenu.setText("Microstructure");

        ImportMenuItem.setText("Import");
        ImportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportMenuItemActionPerformed(evt);
            }
        });
        microstructureMenu.add(ImportMenuItem);

        ExportMenuItem.setText("Export");
        ExportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportMenuItemActionPerformed(evt);
            }
        });
        microstructureMenu.add(ExportMenuItem);

        fileMenu.add(microstructureMenu);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(prob, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(70, 70, 70))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(436, 436, 436)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(StartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(periodicBC, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(nucleonamonutLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nucleonAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(BCLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(xSizeLabel)
                                    .addComponent(xSize, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ySizeLabel)
                                    .addComponent(ySize, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(absorbingBC, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(cleanButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton1))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(structuretype, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jToggleButton1))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(ngrains, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton7))
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(szer_granic))
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(inclusionType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(62, 62, 62)
                                .addComponent(inclusionsWhen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radius)))))
                .addGap(0, 70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(BCLabel)
                .addGap(2, 2, 2)
                .addComponent(periodicBC)
                .addGap(0, 0, 0)
                .addComponent(absorbingBC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nucleonamonutLabel)
                    .addComponent(nucleonAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xSizeLabel)
                    .addComponent(ySizeLabel))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ySize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cleanButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StartButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(prob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inclusionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(radius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inclusionsWhen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(szer_granic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton6)
                        .addComponent(jButton7))
                    .addComponent(ngrains, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButton1)
                    .addComponent(structuretype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
  
    
    
    public void rysuj()
    {
        Graphics g = jPanel1.getGraphics();
        g.clearRect(0,0,400,400);
        for(int i=0; i<400; i++)
        {
           for(int j=0; j<400; j++)
           {
               if (rozrost.tab[i][j] == 500)
               {
                   g.setColor(Color.getHSBColor(0,0,0));
                   g.fillRect(i,j,1,1);
               }
               if (rozrost.tab[i][j] >0)
               {
                   g.setColor(Color.getHSBColor(rozrost.tab[i][j]*20%255+1,rozrost.tab[i][j]%255*50+1,rozrost.tab[i][j]%255*37+1));
                   g.fillRect(i,j,1,1);
               }
               else
               {
                   g.setColor(Color.black);
                   g.fillRect(i,j,1,1);
               }
               
           }
        }
    }

    public void rysujzgranicami(int szer) {
        Graphics g = jPanel1.getGraphics();
        g.clearRect(0, 0, 400, 400);
        for (int i = 0; i < 400; i++) {
            for (int j = 0; j < 400; j++) {
                if (rozrost.granice[i][j]) {
                    g.setColor(Color.black);
                    g.fillRect(i, j, 1, 1);
                } else {
                    if (rozrost.tab[i][j] == 500) {
                        g.setColor(Color.getHSBColor(0, 0, 0));
                        g.fillRect(i, j, 1, 1);
                    }
                    if (rozrost.tab[i][j] > 0) {
                        g.setColor(Color.getHSBColor(rozrost.tab[i][j] * 20 % 255 + 1, rozrost.tab[i][j] % 255 * 50 + 1, rozrost.tab[i][j] % 255 * 37 + 1));
                        g.fillRect(i, j, 1, 1);
                    } else {
                        g.setColor(Color.black);
                        g.fillRect(i, j, 1, 1);
                    }
                }

            }
        }
    }
    public void rysujpuste(int szer, boolean mess) {
        Graphics g = jPanel1.getGraphics();
        g.clearRect(0, 0, 400, 400);
        float procent=0;
        for (int i = 0; i < 400; i++) {
            for (int j = 0; j < 400; j++) {
                if (rozrost.granice[i][j]) {
                    g.setColor(Color.white);
                    g.fillRect(i, j, 1, 1);
                    procent++;
                }  
                else {
                        g.setColor(Color.black);
                        g.fillRect(i, j, 1, 1);
                    }
                }

            }
        if (mess)
            JOptionPane.showMessageDialog(null,"% of grains: "+(procent/(float)(400*400))*100);
        }
    
    
    
    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        
        Boolean bc=false;
        if (this.periodicBC.isSelected())  bc=true;//periodyczne
        else if (this.absorbingBC.isSelected()) bc=false;  //nieperiodyczne
        
        int i=0;
        long t = System.currentTimeMillis();
        while(!rozrost.koniec && ((long)System.currentTimeMillis()-t)<15000) {
            rozrost.moor(bc,0);
            if (i++%3 ==0)
                rysuj();
            }
        rozrost.koniec=false;
        

        
    }//GEN-LAST:event_StartButtonActionPerformed

    private void absorbingBCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absorbingBCActionPerformed
        this.periodicBC.setSelected(false);
        if (!periodicBC.isSelected()) this.absorbingBC.setSelected(true);
    }//GEN-LAST:event_absorbingBCActionPerformed

    private void periodicBCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periodicBCActionPerformed
        this.absorbingBC.setSelected(false);
        if (!absorbingBC.isSelected()) this.periodicBC.setSelected(true);
    }//GEN-LAST:event_periodicBCActionPerformed

    private void ImportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportMenuItemActionPerformed
        int odpowiedz = jFileChooser1.showOpenDialog(this);
         if (odpowiedz == jFileChooser1.APPROVE_OPTION) {

	          File file = jFileChooser1.getSelectedFile();
	          try {
                     if (file.getName().substring(file.getName().lastIndexOf(".") + 1).equals("txt"))
                     {
                        rozrost.importFromFile(file);
                        rysuj();
                
                     }
                     if (file.getName().substring(file.getName().lastIndexOf(".") + 1).equals("bmp"))
                     {
                        BufferedImage image = ImageIO.read(file);
                        Graphics g = jPanel1.getGraphics();
                        g.clearRect(0,0,400,400);
                        for (int i =0; i<400; i++)
                        {
                            for (int j=0; j<400; j++)
                            {
                                rozrost.tab[i][j]=image.getRGB(i, j)%255*-1;
                            }
                        }
                        rysuj();
                     }
                        

	          } catch (IOException e) {
	              System.out.println("Nie mogę otworzyć pliku: "+file.getAbsolutePath());
	              System.out.println("Problem: "+e);
	          }
         }
        
    }//GEN-LAST:event_ImportMenuItemActionPerformed

  
    
    
    private void xSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xSizeActionPerformed

    private void ExportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportMenuItemActionPerformed
        int odpowiedz = jFileChooser1.showSaveDialog(this);
	   if (odpowiedz == jFileChooser1.APPROVE_OPTION) {
	       File file = jFileChooser1.getSelectedFile();
	       try {
                   if (file.getName().substring(file.getName().lastIndexOf(".") + 1).equals("txt"))
                    rozrost.exportToFile(file);
                   else
                    rozrost.exportToBmp(file);
	       } catch (IOException e) {
	           System.out.println("Nie mogę zapisać pliku: "+file.getAbsolutePath());
	           System.out.println("Problem: " + e);
	       }
	   }
    }//GEN-LAST:event_ExportMenuItemActionPerformed

    private void cleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanButtonActionPerformed
        Graphics g = jPanel1.getGraphics();
        g.clearRect(0,0,400,400);
        rozrost.wyczysc();
    }//GEN-LAST:event_cleanButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Random r;
        int x,y;
        int id=1;
        for(int i=0; i< (int)nucleonAmount.getValue(); i++)
        {
            r=new Random();
            x=r.nextInt(400);
            y=r.nextInt(400);
            if (rozrost.tab[x][y]!= 500)
                rozrost.dodajZarodek(x, y, id++);
        }
        rysuj();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (inclusionsWhen.getSelectedIndex() == 0) {
            rozrost.addInclusionsBefore(inclusionType.getSelectedIndex(), (int) radius.getValue());
        }
        if (inclusionsWhen.getSelectedIndex() == 1) {
           rozrost.addInclusionsAfter(inclusionType.getSelectedIndex(), (int) radius.getValue());
        }
        rysuj();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Boolean bc=false;
        if (this.periodicBC.isSelected())  bc=true;//periodyczne
        else if (this.absorbingBC.isSelected()) bc=false;  //nieperiodyczne
        
        int i=0;
                long t = System.currentTimeMillis();
        while(!rozrost.koniec && ((long)System.currentTimeMillis()-t)<15000) {
            rozrost.extendedmoor(bc,(int)prob.getValue() );
            if (i++%3 ==0)
                rysuj();
            }
        rozrost.koniec=false;
        

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        rysuj();
        rozrost.znajdz_granice(false,(int)szer_granic.getValue());
        rysujzgranicami((int)szer_granic.getValue());
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        rozrost.znajdz_granice(false,(int)szer_granic.getValue());
        rysujpuste((int)szer_granic.getValue(),true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        rozrost.selectngrains((int)ngrains.getValue(), (int) nucleonAmount.getValue());
        rozrost.znajdz_granice(false,(int)szer_granic.getValue());
        rysujpuste((int)szer_granic.getValue(),false);
    }//GEN-LAST:event_jButton6ActionPerformed

    int kolor=0;
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (kolor %2==0)
            rysuj();
        else 
            rysujpuste((int)szer_granic.getValue(),false);
        kolor++;
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (structuretype.getSelectedIndex()==1) rozrost.dualphase();
        
        
        Random r;
        int x,y;
        int id=1;
        for(int i=0; i< (int)nucleonAmount.getValue(); i++)
        {
            r=new Random();
            x=r.nextInt(400);
            y=r.nextInt(400);
            if (rozrost.tab[x][y]!= 500 && rozrost.tab[x][y]!=450)
                rozrost.dodajZarodek(x, y, id++);
        }
        rysuj();
        
        
        
        Boolean bc=false;
        if (this.periodicBC.isSelected())  bc=true;//periodyczne
        else if (this.absorbingBC.isSelected()) bc=false;  //nieperiodyczne
        
        int i=0;
        long t = System.currentTimeMillis();
        while(!rozrost.koniec && ((long)System.currentTimeMillis()-t)<11000) {
            rozrost.moor(bc,(int)ngrains.getValue());
            if (i++%3 ==0)
                rysuj();
            }
        rozrost.koniec=false;
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Okno2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Okno2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Okno2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Okno2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Okno2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BCLabel;
    private javax.swing.JMenuItem ExportMenuItem;
    private javax.swing.JMenuItem ImportMenuItem;
    private javax.swing.JButton StartButton;
    private javax.swing.JRadioButton absorbingBC;
    private javax.swing.JButton cleanButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JComboBox inclusionType;
    private javax.swing.JComboBox inclusionsWhen;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu microstructureMenu;
    private javax.swing.JSpinner ngrains;
    private javax.swing.JSpinner nucleonAmount;
    private javax.swing.JLabel nucleonamonutLabel;
    private javax.swing.JRadioButton periodicBC;
    private javax.swing.JSpinner prob;
    private javax.swing.JSpinner radius;
    private javax.swing.JComboBox structuretype;
    private javax.swing.JSpinner szer_granic;
    private javax.swing.JTextField xSize;
    private javax.swing.JLabel xSizeLabel;
    private javax.swing.JTextField ySize;
    private javax.swing.JLabel ySizeLabel;
    // End of variables declaration//GEN-END:variables
}
